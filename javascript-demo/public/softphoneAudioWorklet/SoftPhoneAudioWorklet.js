(()=>{"use strict";var e={494:(e,t,n)=>{const o=n(672),r=n(817);e.exports={atob:o,btoa:r}},672:e=>{function t(e){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(e);return t<0?void 0:t}e.exports=function(e){if((e=(e=`${e}`).replace(/[ \t\n\f\r]/g,"")).length%4==0&&(e=e.replace(/==?$/,"")),e.length%4==1||/[^+/0-9A-Za-z]/.test(e))return null;let n="",o=0,r=0;for(let a=0;a<e.length;a++)o<<=6,o|=t(e[a]),r+=6,24===r&&(n+=String.fromCharCode((16711680&o)>>16),n+=String.fromCharCode((65280&o)>>8),n+=String.fromCharCode(255&o),o=r=0);return 12===r?(o>>=4,n+=String.fromCharCode(o)):18===r&&(o>>=2,n+=String.fromCharCode((65280&o)>>8),n+=String.fromCharCode(255&o)),n}},817:e=>{function t(e){if(e>=0&&e<64)return"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[e]}e.exports=function(e){let n;for(e=`${e}`,n=0;n<e.length;n++)if(e.charCodeAt(n)>255)return null;let o="";for(n=0;n<e.length;n+=3){const r=[void 0,void 0,void 0,void 0];r[0]=e.charCodeAt(n)>>2,r[1]=(3&e.charCodeAt(n))<<4,e.length>n+1&&(r[1]|=e.charCodeAt(n+1)>>4,r[2]=(15&e.charCodeAt(n+1))<<2),e.length>n+2&&(r[2]|=e.charCodeAt(n+2)>>6,r[3]=63&e.charCodeAt(n+2));for(let e=0;e<r.length;e++)void 0===r[e]?o+="=":o+=t(r[e])}return o}},271:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=o(n(180)),a=o(n(370)),s=o(n(202)),u=o(n(143));class l extends AudioWorkletProcessor{constructor(e){super(e),this._queue=[],this._sequenceNumber=0,this.port.onmessage=this.handleMessage.bind(this),this.process=this.process.bind(this)}static get parameterDescriptors(){return[{name:l.MUTED_PARAMETER,defaultValue:1,minValue:0,maxValue:1,automationRate:"a-rate"}]}handleMessage(e){if(null==e.data.payload)throw new Error("Encountered null payload on audio message.");const t=r.default.decode(e.data.payload);for(let e=0;e<t.length;e++){const n=s.default.decode(t[e]),o=a.default.encode(n);this._queue.push(o)}}process(e,t,n){let o=t[0];if(o){let e=o[0];if(e){const n=new Float32Array(e.length);for(let t=0;t<e.length;t++)n[t]=this._queue.shift()||0;for(let r=0;r<t.length;r++){o=t[r];for(let t=0;t<o.length;t++){e=o[t];for(let t=0;t<e.length;t++)e[t]=n[t]}}}}const c=e[0],d=n[l.MUTED_PARAMETER];if(c){const t=e[0][0];if(t){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++){const o=1===(1===d.length?d[0]:d[n])?0:a.default.decode(t[n]);e[n]=s.default.encode(o)}const n={sequenceNumber:this._sequenceNumber++,type:u.default.OutboundAudio,payload:r.default.encode(e),participantId:null,participantType:null};this.port.postMessage(n)}}return!0}}l.MUTED_PARAMETER="muted",registerProcessor("softphone-audio-worklet",l)},143:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n{}t.default=n,n.InboundAudio="InboundAudio",n.OutboundAudio="OutboundAudio",n.Transcript="Transcript",n.HoldForHuman="HoldForHuman",n.TranscriptEventDetection="TranscriptEventDetection",n.SynthesizeSpeech="SynthesizeSpeech",n.SynthesizeTouchTone="SynthesizeTouchTone",n.Hangup="Hangup",n.TakeOver="TakeOver",n.AgentTakeOver="AgentTakeOver",n.ConnectionHealth="ConnectionHealth"},180:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=n(494);t.default=class{static encode(e){let t="";for(let n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return(0,o.btoa)(t)||""}static decode(e){const t=(0,o.atob)(e);if(!t)return new Uint8Array(0);const n=new Uint8Array(t.length);for(let e=0;e<t.length;e++)n[e]=t.charCodeAt(e);return n}}},370:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=new Int16Array(1);t.default=class{static decode(e){return n[0]=e>0?32767*e:32768*e,n[0]}static encode(e){return e>0?e/32767:e/32768}}},202:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=[0,132,396,924,1980,4092,8316,16764],o=[0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];t.default=class{static encode(e){const t=e>>8&128;0!==t&&(e=-e),(e+=132)>32635&&(e=32635);const n=o[e>>7&255];return~(t|n<<4|e>>n+3&15)}static decode(e){const t=(e=~e)>>4&7;let o=n[t]+((15&e)<<t+3);return 0!=(128&e)&&(o=-o),o}}}},t={};!function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={exports:{}};return e[o].call(a.exports,a,a.exports,n),a.exports}(271)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,