(()=>{"use strict";var e={9:(e,t,r)=>{const n=r(209),o=r(831);e.exports={atob:n,btoa:o}},153:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(r(518)),a=n(r(745)),s=n(r(687)),u=n(r(211));class l extends AudioWorkletProcessor{constructor(e){super(e),this._queue=[],this._sequenceNumber=0,this.port.onmessage=this.handleMessage.bind(this),this.process=this.process.bind(this)}static get parameterDescriptors(){return[{name:l.MUTED_PARAMETER,defaultValue:1,minValue:0,maxValue:1,automationRate:"a-rate"}]}handleMessage(e){if(null==e.data.payload)throw new Error("Encountered null payload on audio message.");const t=o.default.decode(e.data.payload);for(let e=0;e<t.length;e++){const r=s.default.decode(t[e]),n=a.default.encode(r);this._queue.push(n)}}process(e,t,r){let n=t[0];if(n){let e=n[0];if(e){const r=new Float32Array(e.length);for(let t=0;t<e.length;t++)r[t]=this._queue.shift()||0;for(let o=0;o<t.length;o++){n=t[o];for(let t=0;t<n.length;t++){e=n[t];for(let t=0;t<e.length;t++)e[t]=r[t]}}}}const i=e[0],d=r[l.MUTED_PARAMETER];if(i){const t=e[0][0];if(t){const e=new Uint8Array(t.length);for(let r=0;r<t.length;r++){const n=1===(1===d.length?d[0]:d[r])?0:a.default.decode(t[r]);e[r]=s.default.encode(n)}const r={sequenceNumber:this._sequenceNumber++,type:u.default.OutboundAudio,payload:o.default.encode(e),participantId:null,participantType:null};this.port.postMessage(r)}}return!0}}l.MUTED_PARAMETER="muted",registerProcessor("softphone-audio-worklet",l)},209:e=>{function t(e){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(e);return t<0?void 0:t}e.exports=function(e){if(0===arguments.length)throw new TypeError("1 argument required, but only 0 present.");if((e=(e=`${e}`).replace(/[ \t\n\f\r]/g,"")).length%4==0&&(e=e.replace(/==?$/,"")),e.length%4==1||/[^+/0-9A-Za-z]/.test(e))return null;let r="",n=0,o=0;for(let a=0;a<e.length;a++)n<<=6,n|=t(e[a]),o+=6,24===o&&(r+=String.fromCharCode((16711680&n)>>16),r+=String.fromCharCode((65280&n)>>8),r+=String.fromCharCode(255&n),n=o=0);return 12===o?(n>>=4,r+=String.fromCharCode(n)):18===o&&(n>>=2,r+=String.fromCharCode((65280&n)>>8),r+=String.fromCharCode(255&n)),r}},211:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class r{}t.default=r,r.InboundAudio="InboundAudio",r.OutboundAudio="OutboundAudio",r.Transcript="Transcript",r.HoldForHuman="HoldForHuman",r.TranscriptEventDetection="TranscriptEventDetection",r.SynthesizeSpeech="SynthesizeSpeech",r.SynthesizeTouchTone="SynthesizeTouchTone",r.Hangup="Hangup",r.TakeOver="TakeOver",r.AgentTakeOver="AgentTakeOver",r.ConnectionHealth="ConnectionHealth"},518:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(9);t.default=class{static encode(e){let t="";for(let r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return(0,n.btoa)(t)||""}static decode(e){const t=(0,n.atob)(e);if(!t)return new Uint8Array(0);const r=new Uint8Array(t.length);for(let e=0;e<t.length;e++)r[e]=t.charCodeAt(e);return r}}},687:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=[0,132,396,924,1980,4092,8316,16764],n=[0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];t.default=class{static encode(e){const t=e>>8&128;0!==t&&(e=-e),(e+=132)>32635&&(e=32635);const r=n[e>>7&255];return~(t|r<<4|e>>r+3&15)}static decode(e){const t=(e=~e)>>4&7;let n=r[t]+((15&e)<<t+3);return!!(128&e)&&(n=-n),n}}},745:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=new Int16Array(1);t.default=class{static decode(e){return r[0]=e>0?32767*e:32768*e,r[0]}static encode(e){return e>0?e/32767:e/32768}}},831:e=>{function t(e){if(e>=0&&e<64)return"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[e]}e.exports=function(e){if(0===arguments.length)throw new TypeError("1 argument required, but only 0 present.");let r;for(e=`${e}`,r=0;r<e.length;r++)if(e.charCodeAt(r)>255)return null;let n="";for(r=0;r<e.length;r+=3){const o=[void 0,void 0,void 0,void 0];o[0]=e.charCodeAt(r)>>2,o[1]=(3&e.charCodeAt(r))<<4,e.length>r+1&&(o[1]|=e.charCodeAt(r+1)>>4,o[2]=(15&e.charCodeAt(r+1))<<2),e.length>r+2&&(o[2]|=e.charCodeAt(r+2)>>6,o[3]=63&e.charCodeAt(r+2));for(let e=0;e<o.length;e++)void 0===o[e]?n+="=":n+=t(o[e])}return n}}},t={};!function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n].call(a.exports,a,a.exports,r),a.exports}(153)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,